<template>
  <div class="w-full mb-[5px]">
    <div>
       <span class="font-bold"> {{  tassiliInput.form[props.cle]['fields'][props.cle3]['options']['label']}}</span>
    </div>

    <div class="space-y-2 mt-2">
      <div
        v-for="(option, index) in options"
        :key="option"
        class="flex items-center space-x-2"
      >
        <input
          type="checkbox"
          class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
          :value="option"
          v-model="tassiliInput.form[props.cle]['value'][props.cle2][props.cle3]"
        />
        <label class="text-sm">
          {{ labels[index] }}
        </label>
      </div>
    </div>

     
     <div v-if="tassiliInput.errors[`${props.cle}.${props.cle2}.${props.cle3}`]" class="text-[red]">
           {{ tassiliInput.errors[`${props.cle}.${props.cle2}.${props.cle3}`] }}
     </div>

  </div>
</template>

<script setup>
import {TassiliInput} from '@/Vendor/TassiliLibs/stores/tassiliInput'
import { onMounted, watch } from 'vue'

const props = defineProps({
  cle : {
    type :  String
  },
  cle2 : {
    type :  Number
  },
  cle3 : {
    type :  String
  },
});


const tassiliInput = TassiliInput();

console.log() ;

const options = tassiliInput.form[props.cle]['fields'][props.cle3]['options']['contents']
const labels =  tassiliInput.form[props.cle]['fields'][props.cle3]['options']['labels'] 

function tab1InclutTab2(tab1, tab2) {
  return tab2.every(item => tab1.includes(item))
}

// Nettoyage de la valeur au montage (ex: string JSON → tableau)
onMounted(() => {
  const currentValue = tassiliInput.form[props.cle]['value'][props.cle2][props.cle3]
  if (typeof currentValue === 'string') {
    try {
      const parsed = JSON.parse(currentValue)
      if (Array.isArray(parsed)) {
        tassiliInput.form[props.cle]['value'][props.cle2][props.cle3] = parsed
      } else {
        tassiliInput.form[props.cle]['value'][props.cle2][props.cle3] = []
      }
    } catch {
      tassiliInput.form[props.cle]['value'][props.cle2][props.cle3] = []
    }
  }
})

// Watch pour valider que toutes les valeurs sont valides
watch(
  () => tassiliInput.form[props.cle]['value'][props.cle2][props.cle3],
  (newValue) => {
    const allowed = tassiliInput.form[props.cle]['fields'][props.cle3]['options']['contents']

    // S'il y a des éléments dans la valeur qui ne sont pas valides, on réinitialise
    const isArray = Array.isArray(newValue)
    const isValid = isArray && newValue.every(item => allowed.includes(item))

    if (!isValid) {
      tassiliInput.form[props.cle]['value'][props.cle2][props.cle3] = []
    }
  },
  { immediate: true }
)
</script>