<template>
  <div>
    
    <form @submit.prevent="update()">
      <div
        v-for="([key, field], index) in Object.entries(tassiliInput.form).filter(([_, f]) => f.type !== 'Hidden')"
        :key="key"
      >
       
       <InputText v-if="field.type === 'Text'" 
       :cle="key" />

       <Textarea v-if="field.type === 'Textarea'" 
       :cle="key" />

        <InputNumber v-if="field.type === 'Number'" 
       :cle="key" />

       <Password v-if="field.type === 'Password'" 
       :cle="key" />

       <InputSelect v-if="field.type === 'Select'" 
       :cle="key" />

       <InputDate v-if="field.type === 'Date'" 
       :cle="key" />

       <InputRadio v-if="field.type === 'Radio'" 
       :cle="key" />

       <Checkbox v-if="field.type === 'Checkbox'" 
       :cle="key" />

       <CheckboxList v-if="field.type === 'CheckboxList'" 
       :cle="key" />

       <RichEditor v-if="field.type === 'Quill'" 
       :cle="key" />

       <InputFileEdit v-if="field.type === 'FileEdit'" 
       :cle="key" />
      
       <Repeteur v-if="field.type === 'Repeater'" 
       :cle="key" />

       <MultipleFileEdit v-if="field.type === 'MultipleFileEdit'" 
       :cle="key" />




      </div>

      <div class="pt-[10px] p-[0px]">
        <button
          :disabled="isSubmitting"
          :class="[
            'bg-[blue] w-[160px] text-white p-[9px] rounded-[2px] flex justify-center items-center',
            { 'opacity-50 cursor-not-allowed': isSubmitting }
          ]"
          type="submit"
        >
          <span v-if="!isSubmitting">Update</span>
          <span v-else class="loader"></span>
        </button>
      </div>
    </form>
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { TassiliInput } from '@/Vendor/TassiliLibs/stores/tassiliInput';
import InputText from '../ListeInputs/InputText.vue';
import Textarea from '../ListeInputs/Textarea.vue';
import InputNumber from '../ListeInputs/InputNumber.vue';
import Password from '../ListeInputs/Password.vue';
import InputSelect from '../ListeInputs/InputSelect.vue';
import InputDate from '../ListeInputs/InputDate.vue';
import InputRadio from '../ListeInputs/InputRadio.vue';
import Checkbox from '../ListeInputs/Checkbox.vue';
import CheckboxList from '../ListeInputs/CheckboxList.vue';
import RichEditor from '../ListeInputs/RichEditor.vue';
import InputFileEdit from '../ListeInputs/InputFileEdit.vue';
import MultipleFileEdit from '../ListeInputs/MultipleFileEdit.vue';
import Repeteur from '../ListeInputs/Repeteur.vue';


import { TassiliListing } from '@/Vendor/TassiliLibs/stores/tassiliListing';
import { router, usePage } from '@inertiajs/vue3';

const page = usePage();
const tassiliInput = TassiliInput();
const tassililisting = TassiliListing();
const isSubmitting = ref(false);

function cleanQuillContent(html) {
  if (typeof html !== 'string') return html;
  return html.replace(/<p>\s*<\/p>/g, '').replace(/<p><br><\/p>/g, '').trim();
}


function checkNullable() {
  let temoin = 0;

  Object.keys(tassiliInput.form).forEach((champ) => {

   if (tassiliInput.form[champ]['type'] === 'MultipleFileEdit') {
        if (tassiliInput.form[champ]['options']['existingFiles'].length  === 0 && 
          tassiliInput.form[champ]['options']['tempUrlTabs'].length === 0 &&
      tassiliInput.form[champ]['options']['nullable'] === 'yes') {
         temoin++;
           }
    }
 
  });

  return temoin;
}



function update() {

const temoin = checkNullable();

if (temoin > 0) {
  const notyf = new Notyf({ position: { x: 'right', y: 'top' } });
  notyf.error(`${temoin} fields(s) required are missing(s).`);
  return;
}


  isSubmitting.value = true;
  const formData = new FormData();

  formData.append(
    'urlValidationurlValidationurlValidationTassili17485RRY4R4RD9448RK48K4RFRFIRU',
    tassililisting.urlCustomValidation
  );
  formData.append('id', tassililisting.recordAction['id']);

  Object.keys(tassiliInput.form).forEach((key) => {


    const tab1 = ['MultipleFileEdit']
    if (tab1.includes(tassiliInput.form[key]['type'])) {
    if(!tassiliInput.form[key]['value'] || tassiliInput.form[key]['value'].length === 0) {
      formData.append(key, '');
    }
    else if (Array.isArray(tassiliInput.form[key]['value'])) {
      tassiliInput.form[key]['value'].forEach((file, index) => {
        formData.append(`${key}[]`, file);
      });
    }
 

     const  temp = tassiliInput.form[key]['options']['existingFiles'] || '[]';
     const index = key + '_newtab'
      formData.append(index, JSON.stringify(temp));

    
    } 


    const tab2 = ['FileEdit'];
    if(tab2.includes(tassiliInput.form[key]['type'])) {
      formData.append(key , tassiliInput.form[key]['value']);
    }


    const tab3 = [
      'Text','Date','Hidden','Select','Number','Radio','Checkbox','CheckboxList','Password','Textarea',
    ];
    if (tab3.includes(tassiliInput.form[key]['type'])) {
      formData.append(key, tassiliInput.form[key]['value']);
    }


    const tab4 = ['Quill'];
    if(tab4.includes(tassiliInput.form[key]['type'])) {
      formData.append(key, cleanQuillContent(tassiliInput.form[key]['value'] || ''));
    }



if (tassiliInput.form[key]['type'] === 'Repeater' ) {

   tassiliInput.form[key]['value'].forEach((item, i) => {
    Object.entries(item).forEach(([subKey, subValue]) => {

       if(tassiliInput.form[key]['fields'][subKey]['type'] === 'Quill') {
          subValue  = cleanQuillContent(subValue || '')
      }

      formData.append(`${key}[${i}][${subKey}]`, subValue);

    });
  });


}



  });

  router.post(tassililisting.urlCustomValidation, formData, {
    forceFormData: true,
    onError: (errors) => {
      tassiliInput.setError(errors);
      isSubmitting.value = false;
    },
    onSuccess: () => {
      tassililisting.customActionModal = false;
      isSubmitting.value = false;
      const notyf = new Notyf({ position: { x: 'right', y: 'top' } });
      notyf.success('Record Updated');
    },
  });
}
</script>

<style lang="css" scoped>
.loader {
  border: 2px solid white;
  border-top: 2px solid transparent;
  border-radius: 50%;
  width: 18px;
  height: 18px;
  animation: spin 0.6s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}
</style>