<template>
  <div class="w-full mb-[5px]">
     <div>
        <span class="font-bold"> {{  tassiliInput.form[props.cle]['fields'][props.cle3]['options']['label']}}</span>
     </div>
     
     <div>
        <input class="w-full  bg-[#555] h-[50px]
      border-[darkblue] border-[1px] text-white"
         type="number" v-model="tassiliInput.form[props.cle]['value'][props.cle2][props.cle3]"
           :min="tassiliInput.form[props.cle]['fields'][props.cle3]['options'].min !== 'infinite' ?
               tassiliInput.form[props.cle]['fields'][props.cle3]['options'].min : null"
           :max="tassiliInput.form[props.cle]['fields'][props.cle3]['options'].max !== 'infinite' ? 
                 tassiliInput.form[props.cle]['fields'][props.cle3]['options'].max : null"
           :step="tassiliInput.form[props.cle]['fields'][props.cle3]['options'].step"
         
         >
     </div>
    
   
     <div v-if="tassiliInput.errors[`${props.cle}.${props.cle2}.${props.cle3}`]" class="text-[red]">
           {{ tassiliInput.errors[`${props.cle}.${props.cle2}.${props.cle3}`] }}
     </div>

 </div>
 </template>
<script setup>
import {TassiliInput} from '@/Vendor/TassiliLibs/stores/tassiliInput'

const props = defineProps({
  cle : {
    type :  String
  },
  cle2 : {
    type :  Number
  },
  cle3 : {
    type :  String
  },
});


const tassiliInput = TassiliInput();

</script>