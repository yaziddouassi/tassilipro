<template>
  <div class="w-full mb-5">
    <div>
       <span class="font-bold"> {{  tassiliInput.form[props.cle]['options']['label']}}</span>
    </div>

    <div class="w-[100%] flex items-center justify-center">
      <label class="w-[100%]">
        <input type="file" ref="fileInputRef" @change="handleFileSelection" hidden />
        <div 
          class="flex w-[100%] min-h-[120px] px-4 py-6 border-2 border-dashed border-gray-400 rounded-lg text-gray-600 text-sm font-medium items-center justify-center cursor-pointer transition-all duration-200 hover:border-blue-400 hover:bg-blue-50"
          :class="{ 'border-blue-500 bg-blue-50': isDragging }"
          @dragover.prevent="handleDragOver"
          @dragleave.prevent="handleDragLeave" 
          @drop.prevent="handleDrop"
        >
          <div class="text-center">
            <div class="mb-2">
              <svg class="w-8 h-8 mx-auto text-[blue]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
              </svg>
            </div>
            <p class="font-semibold mb-1">Drag and Drop</p>
            <p class="text-xs text-gray-500">or click here</p>
          </div>
        </div>
      </label>
    </div>


    <!-- Bouton pour supprimer le fichier sélectionné -->
    <div v-if="tassiliInput.form[props.cle]['value']?.name" class="mt-3 flex justify-end">
      <button
        type="button"
        @click="clearFile"
        class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-xs transition-colors"
      >
        Delete file
      </button>
    </div>

    <div>
      <!-- Display Selected File Name -->
      <div v-if="tassiliInput.form[props.cle]['value']?.name &&
       !tassiliInput.form[props.cle]['value']?.type.startsWith('audio')
       && !tassiliInput.form[props.cle]['value']?.type.startsWith('image') 
       && !tassiliInput.form[props.cle]['value']?.type.startsWith('video')
       "
      class="mt-2 text-gray-700 text-sm">
        <span class="font-semibold">{{ tassiliInput.form[props.cle]['value'].name }}</span>
      </div>

      <div v-if="tassiliInput.form[props.cle]['options']['tempUrls'] &&
       tassiliInput.form[props.cle]['value']?.type.startsWith('audio')" 
      class="flex justify-center mt-2">
         <audio controls class="w-[250px]" :src="tassiliInput.form[props.cle]['options']['tempUrls']" type="audio/mpeg">
          Your browser does not support the audio element.
       </audio>
     </div>

     <div v-if="tassiliInput.form[props.cle]['options']['tempUrls'] &&
       tassiliInput.form[props.cle]['value']?.type.startsWith('image')"
       class="mt-3 flex justify-center">
          <img :src="tassiliInput.form[props.cle]['options']['tempUrls']" alt="Selected Image" class="w-32 h-32 object-cover rounded-lg shadow" />
     </div>

     <div v-if="tassiliInput.form[props.cle]['options']['tempUrls'] &&
       tassiliInput.form[props.cle]['value']?.type.startsWith('video')" 
     class="mt-3">
          <video controls :src="tassiliInput.form[props.cle]['options']['tempUrls']" type="video/mp4"
            class="w-full h-auto rounded-md">
            Your browser does not support the video tag.
          </video>
        </div>
    </div>
    
    <!-- Progress Bar -->
    <div v-if="uploadProgress > 0" class="relative w-full h-2 bg-gray-300 rounded mt-2">
      <div
        class="absolute top-0 left-0 h-full bg-blue-500 rounded transition-all duration-300"
        :style="{ width: uploadProgress + '%' }"
      ></div>
    </div>

    <div v-if="uploadProgress > 0" class="text-sm text-gray-600 mt-1">
      Uploading: {{ uploadProgress }}%
    </div>

    <div v-if="tassiliInput.errors[cle]" class="text-[red] mt-2">{{ tassiliInput.errors[cle] }}</div>
  </div>
</template>

<script setup>
import { ref, watch, onMounted } from 'vue';
import {TassiliInput} from '@/Vendor/TassiliLibs/stores/tassiliInput'

const props = defineProps({
  cle : {
    type :  String
  },
  progress: {
    type: Number,
    default: 0,
  },
});

const tassiliInput = TassiliInput();

const uploadProgress = ref(0);
const fileInputRef = ref(null);
const isDragging = ref(false);

// Watch for progress updates from Creator.vue
watch(() => props.progress, (newProgress) => {
  uploadProgress.value = newProgress;
});

// Fonction pour traiter un fichier (commune pour click et drag&drop)
const processFile = (file) => {
  if (file) {
    tassiliInput.form[props.cle]['value'] = file;
    tassiliInput.form[props.cle]['options']['tempUrls'] = URL.createObjectURL(file);
  }
};

// Gestion de la sélection des fichiers (click)
const handleFileSelection = (event) => {
  const file = event.target.files[0];
  if (file) {
    processFile(file);
  }
  // Ne pas vider tempUrls si aucun fichier n'est sélectionné
  // L'utilisateur doit utiliser le bouton "Supprimer le fichier" pour cela
};

// Gestion du drag over
const handleDragOver = (event) => {
  event.preventDefault();
  isDragging.value = true;
};

// Gestion du drag leave
const handleDragLeave = (event) => {
  event.preventDefault();
  isDragging.value = false;
};

// Gestion du drop
const handleDrop = (event) => {
  event.preventDefault();
  isDragging.value = false;
  
  const files = event.dataTransfer.files;
  if (files.length > 0) {
    const file = files[0]; // Prendre seulement le premier fichier pour un upload simple
    processFile(file);
  }
};

// Fonction pour supprimer le fichier sélectionné
const clearFile = () => {
  // Nettoyer l'URL pour éviter les fuites mémoire
  if (tassiliInput.form[props.cle]['options']['tempUrls']) {
    URL.revokeObjectURL(tassiliInput.form[props.cle]['options']['tempUrls']);
  }
  
  // Vider les valeurs
  tassiliInput.form[props.cle]['value'] = '';
  tassiliInput.form[props.cle]['options']['tempUrls'] = '';
  
  // Réinitialiser l'input file
  if (fileInputRef.value) {
    fileInputRef.value.value = '';
  }
};

// Watch modifié pour ne plus vider automatiquement tempUrls
watch(() => tassiliInput.form[props.cle]['value'], (newValue) => {
  // Ne vider que l'input file, pas tempUrls
  // tempUrls reste persistant jusqu'à ce que l'utilisateur le supprime manuellement
  if (newValue == '' && fileInputRef.value) {
    fileInputRef.value.value = '';
  }
});

onMounted(() => {
  if (fileInputRef.value) {
    fileInputRef.value.value = ''; // Ensure input is empty on mount
  }
});
</script>