<template>
  <div class="w-full mb-[5px]">
    <div>
      <span class="font-bold">
        {{ tassiliInput.form[props.cle]['options']['label'] }}
      </span>
    </div>

    <div
      v-for="(value, index) in tassiliInput.form[props.cle]['value']"
      :key="index"
      class="p-[5px] border-[1px] border-[#555] mb-[10px] rounded-[5px]"
      :draggable="tassiliInput.form[props.cle]['draggable'] === 'yes'"
      @dragstart="handleDragStart(index)"
      @dragover.prevent
      @dragenter="handleDragEnter(index)"
      @dragleave="handleDragLeave(index)"
      @drop="handleDrop(index)"
      :class="{ 'bg-blue-100': dragOverIndex === index }"
    >
      <div class="grid grid-cols-2 mb-2"
       v-if="tassiliInput.form[props.cle]['options']['readOnly'] ==='no'">
        <div class="flex gap-2 items-center">
         <span class="material-icons"
          v-if="tassiliInput.form[props.cle]['draggable'] === 'yes'">
                        arrow_upward
                </span>
                 <span class="material-icons"
          v-if="tassiliInput.form[props.cle]['draggable'] === 'yes'">
                      arrow_downward
                    </span>
        </div>
        <div class="text-right">
          <span v-if="tassiliInput.form[props.cle]['removeLine'] === 'yes'"
            class="material-icons text-[red] cursor-pointer"
            @click="removeKey(index)"
          >
            delete
          </span>
        </div>
      </div>

      <div
        class="grid gap-4 mb-4"
        :class="'grid-cols-' + tassiliInput.form[props.cle]['grid']"
      >
        <div v-for="(value2, key2) in value" :key="key2">
          <InputText
            v-if="tassiliInput.form[props.cle]['fields'][key2]['type'] === 'Text'"
            :cle="props.cle"
            :cle2="index"
            :cle3="key2"
          />
          <CheckboxList
            v-if="tassiliInput.form[props.cle]['fields'][key2]['type'] === 'CheckboxList'"
            :cle="props.cle"
            :cle2="index"
            :cle3="key2"
          />

           <Checkbox
            v-if="tassiliInput.form[props.cle]['fields'][key2]['type'] === 'Checkbox'"
            :cle="props.cle"
            :cle2="index"
            :cle3="key2"
          />

          <InputDate
            v-if="tassiliInput.form[props.cle]['fields'][key2]['type'] === 'Date'"
            :cle="props.cle"
            :cle2="index"
            :cle3="key2"
          />

          <InputNumber
            v-if="tassiliInput.form[props.cle]['fields'][key2]['type'] === 'Number'"
            :cle="props.cle"
            :cle2="index"
            :cle3="key2"
          />

          <InputRadio
            v-if="tassiliInput.form[props.cle]['fields'][key2]['type'] === 'Radio'"
            :cle="props.cle"
            :cle2="index"
            :cle3="key2"
          />

          <InputSelect
            v-if="tassiliInput.form[props.cle]['fields'][key2]['type'] === 'Select'"
            :cle="props.cle"
            :cle2="index"
            :cle3="key2"
          />

          <Textarea
            v-if="tassiliInput.form[props.cle]['fields'][key2]['type'] === 'Textarea'"
            :cle="props.cle"
            :cle2="index"
            :cle3="key2"
          />

          <RichEditor
            v-if="tassiliInput.form[props.cle]['fields'][key2]['type'] === 'Quill'"
            :cle="props.cle"
            :cle2="index"
            :cle3="key2"
          />


          
        </div>
      </div>
    </div>

    <div v-if="tassiliInput.errors[cle]" class="text-[red]">
      {{ tassiliInput.errors[cle] }}
    </div>

    <div v-if="tassiliInput.form[props.cle]['options']['readOnly'] ==='no'"
      class="p-[8px] text-center font-bold border-[2px] border-[#555] rounded-[5px] cursor-pointer"
      @click="addLine()"
    >
      addLine
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import { TassiliInput } from '@/Vendor/TassiliLibs/stores/tassiliInput'
import InputText from '../Repeteur/InputText.vue'
import CheckboxList from '../Repeteur/CheckboxList.vue'
import Checkbox from '../Repeteur/Checkbox.vue'
import InputDate from '../Repeteur/InputDate.vue'
import InputNumber from '../Repeteur/InputNumber.vue'
import InputRadio from '../Repeteur/InputRadio.vue'
import InputSelect from '../Repeteur/InputSelect.vue'
import Textarea from '../Repeteur/Textarea.vue'
import RichEditor from '../Repeteur/RichEditor.vue'

const props = defineProps({
  cle: {
    type: String,
  },
})

const tassiliInput = TassiliInput()

console.log(tassiliInput.form[props.cle]['draggable'])

function addLine() {
  tassiliInput.form[props.cle]['value'].push(
    JSON.parse(JSON.stringify(tassiliInput.form[props.cle]['schemaFields']))
  )
}

function removeKey(index) {
  tassiliInput.form[props.cle]['value'].splice(index, 1)
}

// DRAG & DROP LOGIC
const dragStartIndex = ref(null)
const dragOverIndex = ref(null)

function handleDragStart(index) {

  if(tassiliInput.form[props.cle]['draggable'] === 'no') {
    return;
  }
  dragStartIndex.value = index
}

function handleDragEnter(index) {
  if(tassiliInput.form[props.cle]['draggable'] === 'no') {
    return;
  }
  dragOverIndex.value = index
}

function handleDragLeave(index) {
  if(tassiliInput.form[props.cle]['draggable'] === 'no') {
    return;
  }
  if (dragOverIndex.value === index) {
    dragOverIndex.value = null
  }
}

function handleDrop(index) {
  if(tassiliInput.form[props.cle]['draggable'] === 'no') {
    return;
  }
  const start = dragStartIndex.value
  const end = index
  const list = tassiliInput.form[props.cle]['value']

  if (start !== null && end !== null && start !== end) {
    const item = list[start]
    list.splice(start, 1)
    list.splice(end, 0, item)
  }

  dragStartIndex.value = null
  dragOverIndex.value = null
}
</script>