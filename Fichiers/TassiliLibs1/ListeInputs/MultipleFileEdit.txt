<template>
  <div class="w-full mb-5">
    <div>
       <span class="font-bold"> {{  tassiliInput.form[props.cle]['options']['label']}}</span>
    </div>



    <div class="w-full flex items-center justify-center">
      <label class="w-full">
        <input type="file" ref="fileInputRef" @change="handleFileSelection"  multiple hidden />
        <div class="flex w-full h-[50px] px-2 bg-[blue] rounded-full text-white text-sm font-semibold items-center justify-center cursor-pointer">
          Choose Files
        </div>
      </label>
    </div>

    <div v-if="!tassiliInput.form[props.cle]['options']['existingFiles'].length &&
      !tassiliInput.form[props.cle]['options']['tempUrlTabs'].length &&
      tassiliInput.form[props.cle]['options']['nullable'] === 'yes' "
     class="text-[red]">
 
      the field is required
    </div>

    
    <div v-if="tassiliInput.errors[cle]" class="text-[red]">{{ tassiliInput.errors[cle] }}</div>


    <div v-if="tassiliInput.form[props.cle]['options']['existingFiles'].length" class="mt-3 grid grid-cols-2 gap-4">
      <div v-for="(file, index) in tassiliInput.form[props.cle]['options']['existingFiles']" :key="file" class="relative">
        
        <div v-if="!UnionExtensions.
      some(ext => file?.toLowerCase().endsWith(ext))"
    class="mt-2 text-gray-700 text-sm">
      <span class="font-semibold">{{ file }}  </span>
    </div>


    <div v-if="audioExtensions.
      some(ext => file?.toLowerCase().endsWith(ext))" 
    class="flex justify-center mt-2">
       <audio controls class="w-[250px]" :src="page.props.tassiliUrlStorage+file" type="audio/mpeg">
        Your browser does not support the audio element.
     </audio>
   </div>

   <div v-if="imageExtensions.
      some(ext => file?.toLowerCase().endsWith(ext))"
     class="mt-3 flex justify-center">
        <img :src="page.props.tassiliUrlStorage+file" alt="Selected Image" class="w-32 h-32 object-cover rounded-lg shadow" />
   </div>

   <div v-if="videoExtensions.
      some(ext => file?.toLowerCase().endsWith(ext))" 
   class="mt-3">
        <video controls :src="page.props.tassiliUrlStorage+file" type="video/mp4"
          class="w-full h-auto rounded-md">
          Your browser does not support the video tag.
        </video>
      </div>

        <!-- Bouton de suppression -->
        <button
          type="button"
          @click="removeExistingFile(file)"
          class="absolute top-2 right-2 bg-red-500 text-white px-2 py-1 rounded-full text-xs"
        >
          X
        </button>
      </div>
    </div>








  

    <!-- Aperçu des fichiers sélectionnés -->
    <div v-if="tassiliInput.form[props.cle]['options']['tempUrlTabs'].length" class="mt-3 grid grid-cols-2 gap-4">
      <div v-for="(preview, index) in tassiliInput.form[props.cle]['options']['tempUrlTabs']" :key="preview.url" class="relative">
        <!-- Aperçu Image -->
        <img v-if="isImage(preview.file)" :src="preview.url" class="w-[100px] h-[100px] object-cover rounded" />

        <!-- Aperçu Audio -->
        <audio v-else-if="isAudio(preview.file)" controls class="w-[250px]">
          <source :src="preview.url" :type="preview.file.type" />
          Your browser does not support the audio element.
        </audio>

        <!-- Aperçu Vidéo -->
        <video v-else-if="isVideo(preview.file)" controls class="w-[250px] h-[150px]">
          <source :src="preview.url" :type="preview.file.type" />
          Your browser does not support the video element.
        </video>

        <!-- Affichage des documents -->
        <a v-else :href="preview.url" target="_blank" class="text-blue-500 underline">
          {{ preview.file.name }}
        </a>

        <!-- Bouton de suppression -->
        <button
          type="button"
          @click="removeFile(index)"
          class="absolute top-2 right-2 bg-red-500 text-white px-2 py-1 rounded-full text-xs"
        >
          X
        </button>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, watch, onUnmounted, onMounted } from 'vue';
import {TassiliInput} from '@/Vendor/TassiliLibs/stores/tassiliInput'
import { usePage } from '@inertiajs/vue3'

const props = defineProps({ cle: { type: String, required: true } });

const page = usePage();
const tassiliInput = TassiliInput();
const fileInputRef = ref(null);
const filePreviews = ref([]);


// Formats de fichiers acceptés
const acceptedFormats = 'image/*,audio/*,video/*,.pdf,.doc,.docx,.xls,.xlsx,.txt';


const videoExtensions = ['.mp4', '.webm', '.ogg', '.mov', '.avi', '.mkv', '.flv', '.wmv', '.m4v'];
const audioExtensions = ['.mp3', '.wav', '.ogg', '.flac', '.aac', '.m4a', '.wma', '.aiff', '.alac'];
const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg', '.webp', '.tiff', '.ico'];

const UnionExtensions = [...videoExtensions,...audioExtensions,...imageExtensions];


// Détecte le type de fichier pour l'affichage
const isImage = (file) => file.type.startsWith('image/');
const isAudio = (file) => file.type.startsWith('audio/');
const isVideo = (file) => file.type.startsWith('video/');

// Gestion de la sélection des fichiers
const handleFileSelection = (event) => {
  const files = Array.from(event.target.files);

    files.forEach((file) => {
    if (!tassiliInput.form[props.cle]['value'].some(existingFile => existingFile.name === file.name)) {
      const preview = { file, url: URL.createObjectURL(file) };
      tassiliInput.form[props.cle]['options']['tempUrlTabs'].push(preview);
      tassiliInput.form[props.cle]['value'].push(file);
    }
  });



};


const removeExistingFile = (filePath) => {
  const index = tassiliInput.form[props.cle]['options']['existingFiles'].indexOf(filePath);
  if (index !== -1) {
    tassiliInput.form[props.cle]['options']['existingFiles'].splice(index, 1);
 

  }
};


// Suppression d'un fichier
const removeFile = (index) => {
  URL.revokeObjectURL(tassiliInput.form[props.cle]['options']['tempUrlTabs'][index].url);
  tassiliInput.form[props.cle]['options']['tempUrlTabs'].splice(index, 1);
  tassiliInput.form[props.cle]['value'].splice(index, 1);
};

// Réinitialisation automatique si les données sont vidées
watch(() => tassiliInput.form[props.cle]['value'], (newValue) => {
  if (Array.isArray(newValue) && newValue.length === 0) {
     tassiliInput.form[props.cle]['options']['tempUrlTabs'] = [];
    if (fileInputRef.value) {
      fileInputRef.value.value = '';
    }
  }
}, { deep: true });

// Nettoyage des URLs pour éviter les fuites mémoire
onUnmounted(() => {
  filePreviews.value.forEach(preview => URL.revokeObjectURL(preview.url));
});
</script>